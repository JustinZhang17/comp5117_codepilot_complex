Example 1 -
Code snippet:
def find_minimum(i, j):
    if i <= j:
        return i
    return j
if __name__ == "__main__":
    i = 6
    j = 2
    print(f"min({i}, {j}) = {find_minimum(i, j)}")
PLAN:
Step 1: Verify __name__ : verify that the script is being run as a main program. Since it is, if __name__ == "__main__": will be executed.
Step 2: Variable initialization and assignment in the main function: variable i is assigned an integer value of 6, and variable j is assigned an integer value of 2. These lines will be executed.
Step 3: Print the values of variables i and j, along with the returned integer value of the find_minimum function with parameters i and j. This line will be executed if a find_minimum function with two parameters exists and executes without error.
Step 4: Verify that a find_minimum function with two parameters exists.
Step 5: Since a find_minimum function with two parameters exists, the find_minimum function is executed.
Step 6: Conditional statement in find_minimum function: if parameter i is less than or equal to parameter j, return parameter i. Otherwise, return parameter j. Since parameter i is greater than parameter j, parameter j will be returned.
The code coverage of the given code snippet is then -
> def find_minimum(i, j):
>     if i <= j:
!         return i
>     return j
> if __name__ == "__main__":
>     i = 6
>     j = 2
>     print(f"min({i}, {j}) = {find_minimum(i, j)}")
--------------------------------------------------------------------------------------------------------------------------------
Example 2 -
Code snippet:
import random
def simple_recursion(my_rand):
    if my_rand > 1:
        simple_recursion(my_rand // 2)
if __name__ == "__main__":
    random.seed()
    my_rand = random.randint(0, 2**31 - 1)
    if my_rand % 2 == 0:
        simple_recursion(my_rand)
    else:
        simple_recursion(my_rand - 1)
PLAN:
Step 1: Import random library. This line will be executed.
Step 2: Verify __name__ : verify that the script is being run as a main program. Since it is, if __name__ == "__main__": will be executed.
Step 3: Variable initialization in the main function: initialize the seed used by the random number generator.
Step 4: Variable assignment in the main function: assign a random integer generated by random.randint to the variable my_rand.
Step 5: If-else block within the main function: if my_rand is an even number, then call the simple_recursion function with my_rand as input. Otherwise, call the simple_recursion function with my_rand-1 as input. Since my_rand has probability 1/2 of being an even number, either block could be executed with equal probability.
Step 6: Verify that a simple_recursion function with one parameter exists.
Step 7: Since a simple_recursion function with one parameter exists, the simple_recursion function is executed.
Step 8: Conditional statement in simple_recursion function: if parameter my_rand is greater than 1, call the simple_recursion function with my_rand/2 as input. Since this is a recursive function, we will repeat Step 8 until my_rand equals 1, at which point the function will return.
The code coverage of the given code snippet is then -
> import random
> def simple_recursion(my_rand):
>     if my_rand > 1:
>         simple_recursion(my_rand // 2)
> if __name__ == "__main__":
>     random.seed()
>     my_rand = random.randint(0, 2**31 - 1)
>     if my_rand % 2 == 0:
!         simple_recursion(my_rand)
>     else:
>         simple_recursion(my_rand - 1)
--------------------------------------------------------------------------------------------------------------------------------
Example 3 -
Code snippet:
import random
if __name__ == "__main__":
    random.seed()
    my_rand = random.randint(0, 31)
    if my_rand < 0:
        print("my_rand < 0")
    elif my_rand >= 32:
        print("my_rand >= 32")
    else:
        print("0 <= my_rand < 32")
PLAN:
Step 1: Import random library. This line will be executed.
Step 2: Verify __name__ : verify that the script is being run as a main program. Since it is, if __name__ == "__main__": will be executed.
Step 3: Variable initialization in the main function: initialize the seed used by the random number generator.
Step 4: Variable assignment in the main function: assign a random integer generated by random.randint from the set of integers 0 to 31 inclusive to the variable my_rand.
Step 5: If-else block within the main function: if my_rand has a value which is less than 0, print "my_rand < 0". From Step 4, we know that my_rand cannot be less than 0. Thus, the print statement for this conditional block is not executed. If my_rand has a value which is more than or equal to 32, print "my_rand >= 32". From Step 4, we know that my_rand cannot be more than or equal to 32. Thus, the print statement for this conditional block is not executed. If my_rand has a value which is not less than 0 and not more than or equal to 32, then print "0 <= my_rand < 32". From Step 4, we know that my_rand is a value from the set of integers 0 to 31 inclusive. Thus, the print statement for this conditional block is executed.
The code coverage of the given code snippet is then -
> import random
> if __name__ == "__main__":
>     random.seed()
>     my_rand = random.randint(0, 31)
>     if my_rand < 0:
!         print("my_rand < 0")
>     elif my_rand >= 32:
!         print("my_rand >= 32")
>     else:
>         print("0 <= my_rand < 32")
--------------------------------------------------------------------------------------------------------------------------------

