Input:

For the given code snippet, predict the code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed

Example output:
> line1
! line2
> line3
...
> linen

You need to develop a plan for step by step execution of the code snippet. 
Do not answer unless instructed to do so

DISCLAIMER: Lines that are not executed are to be denoted with a SINGLE '!' whereas lines that are executed are to be denoted with a single '>'
Below are a couple examples of the process you need to follow to predict the code coverage of a given code snippet and its plan.

Example 1

Given CODE SNIPPET: 
#!/bin/bash
remove_vowels(){
	local input="$1"
	local output=""
	for (( i=0; i<${#input}; i++ )); do
		local char="${input:i:1}"
			if [[ ! "$char" =~ [AEIOUY] ]]; then
				output+="$char"
			fi
	done
	echo "$output"
}
main(){
	local str="A"
	local modified_str=$(remove_vowels "$str")
	echo "$modified_str"
}
main

Given PLAN: 
STEP 1: Ensure a main function exists and is called.
STEP 2: The shebang is executed and is read by the operating system.
STEP 3: In the main function, let the variable "str" be the string "A".
STEP 4: In the main function, let the variable "modified_str" be the result of the remove_vowels function with "str" as input. Print "modified_str" to the screen.
STEP 5: Ensure a remove_vowels function exists.
STEP 6: In the remove_vowels function, label input and output variables.
STEP 7: For all characters of the input string, let "char" be the character under analysis.
STEP 8: If "char" is not a vowel, then append "char" to the output variable. In this case, since "char" will only ever have a value of 'A', the body of the if statement is not reached, and the for loop terminates.
STEP 9: At the end of the for loop in the remove_vowels function, print the output string to the screen.

So the CODE COVERAGE for the given code snippet will be: 
> #!/bin/bash
> remove_vowels(){
> 	local input="$1"
> 	local output=""
> 	for (( i=0; i<${#input}; i++ )); do
> 		local char="${input:i:1}"
> 			if [[ ! "$char" =~ [AEIOUY] ]]; then
! 				output+="$char"
  			fi
  	done
> 	echo "$output"
  }
> main(){
> 	local str="A"
> 	local modified_str=$(remove_vowels "$str")
> 	echo "$modified_str"
  }
> main

Example 2

Given CODE SNIPPET: 
#!/bin/bash
isValidParentheses(){
	local str="$1"
	local balance=0
	for (( i=0; i<${#str}; i++ )); do
		local ch="${str:i:1}"
		if [[ "$ch" == "(" ]]; then
			((balance++))
		elif [[ "$ch" == ")" ]]; then
			((balance--))
			if (( balance < 0 )); then
				echo "Invalid"
				return
			fi
		fi
	done
	if (( balance == 0 )); then
		echo "Valid"
	else
		echo "Invalid"
	fi
}
main(){
	local test="))"
	echo "$test is $(isValidParentheses "$test")"
}
main

Given PLAN: 
STEP 1: Ensure a main function exists and is called.
STEP 2: The shebang is executed and is read by the operating system.
STEP 3: In the main function, let the variable "test" be the character array "))".
STEP 4: In the main function, print the result of the isValidParentheses function.
STEP 5: Ensure an isValidParentheses function exists.
STEP 6: In the isValidParentheses function, declare a "balance" variable initialized to 0.
STEP 7: For each character of the character array passed in as input, let "ch" denote that character.
STEP 8: If ch is a left parenthesis, increase the "balance" variable by one. Otherwise, if ch is a right parenthesis, decrease the "balance" variable by one, and check if the "balance" variable is less than zero. If it is, print "Invalid" to the screen and return. In this case, we have a right parenthesis as our first character, so "balance" is decreased to -1. Since -1 is less than 0, the function prints "Invalid" to the screen and returns.
STEP 9: Since the for loop does not complete, the lines below the return statement from step 9 are not executed.

So the CODE COVERAGE for the given code snippet will be: 
> #!/bin/bash
> isValidParentheses(){
> 	local str="$1"
> 	local balance=0
> 	for (( i=0; i<${#str}; i++ )); do
> 		local ch="${str:i:1}"
> 		if [[ "$ch" == "(" ]]; then
! 			((balance++))
> 		elif [[ "$ch" == ")" ]]; then
> 			((balance--))
> 			if (( balance < 0 )); then
> 				echo "Invalid"
> 				return
  			fi
  		fi
  	done
! 	if (( balance == 0 )); then
! 		echo "Valid"
! 	else
! 		echo "Invalid"
  	fi
  }
> main(){
> 	local test="))"
> 	echo "$test is $(isValidParentheses "$test")"
  }
> main


In a similar fashion, develop a PLAN of step by step execution of the below code snippet and predict the CODE COVERAGE.
#!/bin/bash
maxProfit(){
	local prices=("$@")
	local min_price=999999999
	local max_profit=0
	for price in "${prices[@]}"; do
		if (( price < min_price )); then
			min_price=$price
		fi
		local profit=$(( price - min_price ))
		if (( profit > max_profit )); then
			max_profit=$profit
		fi
	done
	echo $max_profit
}
main(){
	prices=(7 1 5 3 6 4)
	result=$(maxProfit "${prices[@]}")
	echo "Maximum profit: $result"
}
main


Output:


Given PLAN: 
STEP 1: Ensure a main function exists and is called.
STEP 2: The shebang is executed and is read by the operating system.
STEP 3: In the main function, let the variable "prices" be an array of integers (7, 1, 5, 3, 6, 4).
STEP 4: In the main function, let the variable "result" be the result of the maxProfit function with "prices" as input. Print "Maximum profit: $result" to the screen.
STEP 5: Ensure a maxProfit function exists.
STEP 6: In the maxProfit function, label input and output variables.
STEP 7: For each element in the input array, let "price" be the current element.
STEP 8: If "price" is less than the current minimum price, update the minimum price to be "price".
STEP 9: Calculate the profit by subtracting the minimum price from the current price.
STEP 10: If the profit is greater than the current maximum profit, update the maximum profit to be the profit.
STEP 11: At the end of the for loop in the maxProfit function, print the maximum profit to the screen.

So the CODE COVERAGE for the given code snippet will be: 
> #!/bin/bash
> maxProfit(){
> 	local prices=("$@")
> 	local min_price=999999999
> 	local max_profit=0
> 	for price in "${prices[@]}"; do
> 		if (( price < min_price )); then
> 			min_price=$price
! 		fi
> 		local profit=$(( price - min_price ))
> 		if (( profit > max_profit )); then
! 			max_profit=$profit
> 		fi
> 	done
> 	echo $max_profit
  }
> main(){
> 	prices=(7 1 5 3 6 4)
> 	result=$(maxProfit "${prices[@]}")
> 	echo "Maximum profit: $result"
  }
> main