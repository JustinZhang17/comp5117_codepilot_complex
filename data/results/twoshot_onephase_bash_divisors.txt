Input:

For the given code snippet, predict the code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed

Example output:
> line1
! line2
> line3
...
> linen

You need to develop a plan for step by step execution of the code snippet. 
Do not answer unless instructed to do so

DISCLAIMER: Lines that are not executed are to be denoted with a SINGLE '!' whereas lines that are executed are to be denoted with a single '>'
Below are a couple examples of the process you need to follow to predict the code coverage of a given code snippet and its plan.

Example 1

Given CODE SNIPPET: 
#!/bin/bash
remove_vowels(){
	local input="$1"
	local output=""
	for (( i=0; i<${#input}; i++ )); do
		local char="${input:i:1}"
			if [[ ! "$char" =~ [AEIOUY] ]]; then
				output+="$char"
			fi
	done
	echo "$output"
}
main(){
	local str="A"
	local modified_str=$(remove_vowels "$str")
	echo "$modified_str"
}
main

Given PLAN: 
STEP 1: Ensure a main function exists and is called.
STEP 2: The shebang is executed and is read by the operating system.
STEP 3: In the main function, let the variable "str" be the string "A".
STEP 4: In the main function, let the variable "modified_str" be the result of the remove_vowels function with "str" as input. Print "modified_str" to the screen.
STEP 5: Ensure a remove_vowels function exists.
STEP 6: In the remove_vowels function, label input and output variables.
STEP 7: For all characters of the input string, let "char" be the character under analysis.
STEP 8: If "char" is not a vowel, then append "char" to the output variable. In this case, since "char" will only ever have a value of 'A', the body of the if statement is not reached, and the for loop terminates.
STEP 9: At the end of the for loop in the remove_vowels function, print the output string to the screen.

So the CODE COVERAGE for the given code snippet will be: 
> #!/bin/bash
> remove_vowels(){
> 	local input="$1"
> 	local output=""
> 	for (( i=0; i<${#input}; i++ )); do
> 		local char="${input:i:1}"
> 			if [[ ! "$char" =~ [AEIOUY] ]]; then
! 				output+="$char"
  			fi
  	done
> 	echo "$output"
  }
> main(){
> 	local str="A"
> 	local modified_str=$(remove_vowels "$str")
> 	echo "$modified_str"
  }
> main

Example 2

Given CODE SNIPPET: 
#!/bin/bash
isValidParentheses(){
	local str="$1"
	local balance=0
	for (( i=0; i<${#str}; i++ )); do
		local ch="${str:i:1}"
		if [[ "$ch" == "(" ]]; then
			((balance++))
		elif [[ "$ch" == ")" ]]; then
			((balance--))
			if (( balance < 0 )); then
				echo "Invalid"
				return
			fi
		fi
	done
	if (( balance == 0 )); then
		echo "Valid"
	else
		echo "Invalid"
	fi
}
main(){
	local test="))"
	echo "$test is $(isValidParentheses "$test")"
}
main

Given PLAN: 
STEP 1: Ensure a main function exists and is called.
STEP 2: The shebang is executed and is read by the operating system.
STEP 3: In the main function, let the variable "test" be the character array "))".
STEP 4: In the main function, print the result of the isValidParentheses function.
STEP 5: Ensure an isValidParentheses function exists.
STEP 6: In the isValidParentheses function, declare a "balance" variable initialized to 0.
STEP 7: For each character of the character array passed in as input, let "ch" denote that character.
STEP 8: If ch is a left parenthesis, increase the "balance" variable by one. Otherwise, if ch is a right parenthesis, decrease the "balance" variable by one, and check if the "balance" variable is less than zero. If it is, print "Invalid" to the screen and return. In this case, we have a right parenthesis as our first character, so "balance" is decreased to -1. Since -1 is less than 0, the function prints "Invalid" to the screen and returns.
STEP 9: Since the for loop does not complete, the lines below the return statement from step 9 are not executed.

So the CODE COVERAGE for the given code snippet will be: 
> #!/bin/bash
> isValidParentheses(){
> 	local str="$1"
> 	local balance=0
> 	for (( i=0; i<${#str}; i++ )); do
> 		local ch="${str:i:1}"
> 		if [[ "$ch" == "(" ]]; then
! 			((balance++))
> 		elif [[ "$ch" == ")" ]]; then
> 			((balance--))
> 			if (( balance < 0 )); then
> 				echo "Invalid"
> 				return
  			fi
  		fi
  	done
! 	if (( balance == 0 )); then
! 		echo "Valid"
! 	else
! 		echo "Invalid"
  	fi
  }
> main(){
> 	local test="))"
> 	echo "$test is $(isValidParentheses "$test")"
  }
> main


In a similar fashion, develop a PLAN of step by step execution of the below code snippet and predict the CODE COVERAGE.
#!/bin/bash
find_divisors(){
	local number=$1
	local divisor=$2
	local -n divisors=$3
	if ((divisor > number)); then
	return
	fi
	if (( number % divisor == 0 )); then
	divisors+=("$divisor")
	fi
	find_divisors "$number" $((divisor + 1)) divisors
}
main(){
	local number=12
	divisors=()
	find_divisors "$number" 1 divisors
	echo "Divisors of $number in descending order: "
	for ((i=${#divisors[@]}-1; i>=0; i--)); do
		echo "${divisors[i]}"
	done
}
main


Output:


Given PLAN: 
STEP 1: Ensure a main function exists and is called.
STEP 2: The shebang is executed and is read by the operating system.
STEP 3: In the main function, let the variable "number" be the integer 12.
STEP 4: In the main function, create an empty array "divisors".
STEP 5: In the main function, call the find_divisors function with "number" as the first argument, 1 as the second argument, and "divisors" as the third argument.
STEP 6: Ensure a find_divisors function exists.
STEP 7: In the find_divisors function, label the input variables "number", "divisor", and "divisors".
STEP 8: If "divisor" is greater than "number", return from the function.
STEP 9: If "number" is divisible by "divisor", append "divisor" to the "divisors" array.
STEP 10: Call the find_divisors function recursively with "number" as the first argument, "divisor" plus 1 as the second argument, and "divisors" as the third argument.
STEP 11: In the main function, print "Divisors of $number in descending order: ".
STEP 12: In the main function, use a for loop to iterate through the "divisors" array in reverse order, printing each element to the screen.

So the CODE COVERAGE for the given code snippet will be: 
> #!/bin/bash
> find_divisors(){
> 	local number=$1
> 	local divisor=$2
> 	local -n divisors=$3
> 	if ((divisor > number)); then
! 		return
> 	fi
> 	if (( number % divisor == 0 )); then
> 		divisors+=("$divisor")
> 	fi
> 	find_divisors "$number" $((divisor + 1)) divisors
  }
> main(){
> 	local number=12
> 	divisors=()
> 	find_divisors "$number" 1 divisors
> 	echo "Divisors of $number in descending order: "
> 	for ((i=${#divisors[@]}-1; i>=0; i--)); do
> 		echo "${divisors[i]}"
> 	done
  }
> main