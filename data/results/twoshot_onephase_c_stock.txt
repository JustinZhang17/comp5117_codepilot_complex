Input:

For the given code snippet, predict the code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed

Example output:
> line1
! line2
> line3
...
> linen

You need to develop a plan for step by step execution of the code snippet. 
Do not answer unless instructed to do so

DISCLAIMER: Lines that are not executed are to be denoted with a SINGLE '!' whereas lines that are executed are to be denoted with a single '>'
Below are a couple examples of the process you need to follow to predict the code coverage of a given code snippet and its plan.

Example 1

Given CODE SNIPPET: 
#include <stdio.h>
#include <string.h>
void removeVowels(char* str){
	int j = 0;
	for (int i = 0; i < strlen(str); i++){
		if (str[i] != 'A' && str[i] != 'E' && str[i] != 'I' && str[i] != 'O' && str[i] != 'U' && str[i] != 'Y'){
			str[j++] = str[i];
		}
	}
	str[j] = '\0';
}
int main(){
	char str[] = "A";
	removeVowels(str);
	printf("%s\n", str);
}


Given PLAN: 
STEP 1: Ensure a main function exists.
STEP 2: Import stdio.h and stdlib.h.
STEP 3: In the main function, let the variable "str" be the character array "A".
STEP 4: In the main function, call the "removeVowels" function with "str" as input. Print "str" to the screen.
STEP 5: Ensure a removeVowels function exists.
STEP 6: In the removeVowels function, declare a variable "j" and initialize it to 0.
STEP 7: For all characters of the input string, if the character under analysis is not a vowel, "str" at index "j" will hold the character's value. J is then increased by one. In this case, since the character will only ever have a value of 'A', the body of the if statement is not reached and the for loop terminates.
STEP 9: At the end of the for loop in the remove_vowels function, append a null character to "str".

So the CODE COVERAGE for the given code snippet will be: 
> #include <stdio.h>
> #include <string.h>
> void removeVowels(char* str){
> 	int j = 0;
> 	for (int i = 0; i < strlen(str); i++){
> 		if (str[i] != 'A' && str[i] != 'E' && str[i] != 'I' && str[i] != 'O' && str[i] != 'U' && str[i] != 'Y'){
! 			str[j++] = str[i];
  		}
  	}
> 	str[j] = '\0';
  }
> int main(){
> 	char str[] = "A";
> 	removeVowels(str);
> 	printf("%s\n", str);
  }

Example 2

Given CODE SNIPPET: 
#include <stdio.h>
#include <stdlib.h>
int isValidParentheses(const char *str){
	int balance = 0;
	for (int i = 0; str[i] != '\0'; i++){
		char ch = str[i];
		if (ch == '('){
			balance++;
		} 
		else if (ch == ')'){
			balance--;
			if (balance < 0){
				return 0;
			}
		}
	}
	return balance == 0;
}
int main(){
    const char *test = "))";
    printf("%s is %s\n", test, isValidParentheses(test) ? "Valid" : "Invalid");
}


Given PLAN: 
STEP 1: Ensure a main function exists.
STEP 2: Import stdio.h and stdlib.h.
STEP 3: In the main function, let the variable "test" be the character array "))".
STEP 4: In the main function, print "Valid" if the isValidParentheses function with "test" as input returns 1, and print "Invalid" if the isValidParentheses function with "test" as input returns 0.
STEP 5: Ensure an isValidParentheses function exists.
STEP 6: In the isValidParentheses function, declare a "balance" variable initialized to 0.
STEP 7: For each character of the character array passed in as input, let "ch" denote that character.
STEP 8: If ch is a left parenthesis, increase the "balance" variable by one. Otherwise, if ch is a right parenthesis, decrease the "balance" variable by one, and check if the "balance" variable is less than zero. If it is, return 0. In this case, we have a right parenthesis as our first character, so "balance" is decreased to -1. Since -1 is less than 0, the function returns 0.
STEP 9: Since the for loop does not complete, we do not execute the line which returns 1 if "balance" is equal to zero, and 0 otherwise.

So the CODE COVERAGE for the given code snippet will be: 
> #include <stdio.h>
> #include <stdlib.h>
> int isValidParentheses(const char *str){
>		int balance = 0;
> 	for (int i = 0; str[i] != '\0'; i++){
> 		char ch = str[i];
> 		if (ch == '('){
! 			balance++;
  		} 
> 		else if (ch == ')'){
> 			balance--;
> 			if (balance < 0){
> 				return 0;
  			}
  		}
  	}
! 	return balance == 0;
  }
> int main(){
>     const char *test = "))";
>     printf("%s is %s\n", test, isValidParentheses(test) ? "Valid" : "Invalid");
  }



In a similar fashion, develop a PLAN of step by step execution of the below code snippet and predict the CODE COVERAGE.
#include<stdlib.h>
#include <stdio.h>
#include <limits.h>
int maxProfit(int* prices, int pricesSize){
	int min_price = INT_MAX;
	int max_profit = 0;
	for (int i = 0; i < pricesSize; i++){
		if (prices[i] < min_price){
			min_price = prices[i];
		}
		int profit = prices[i] - min_price;
		if (profit > max_profit){
			max_profit = profit;
		}
	}
	return max_profit;
}
int main(){
	int prices[] = {7, 1, 5, 3, 6, 4};
	int size = sizeof(prices) / sizeof(prices[0]);
	int result = maxProfit(prices, size);
	printf("Maximum profit: %d\n", result);
}


Output:


Given PLAN: 
STEP 1: Ensure a main function exists.
STEP 2: Import stdlib.h and stdio.h.
STEP 3: In the main function, let the variable "prices" be the integer array {7, 1, 5, 3, 6, 4}.
STEP 4: In the main function, let the variable "size" be the size of the "prices" array.
STEP 5: In the main function, call the maxProfit function with "prices" and "size" as inputs. Print the result to the screen.
STEP 6: Ensure a maxProfit function exists.
STEP 7: In the maxProfit function, declare a "min_price" variable initialized to the maximum integer value.
STEP 8: In the maxProfit function, declare a "max_profit" variable initialized to 0.
STEP 9: For each element in the "prices" array, if the element is less than the current "min_price" value, update "min_price" to be that element's value.
STEP 10: Calculate the profit by subtracting the current element from "min_price".
STEP 11: If the profit is greater than the current "max_profit" value, update "max_profit" to be the profit.
STEP 12: Return the "max_profit" value.

So the CODE COVERAGE for the given code snippet will be: 
> #include<stdlib.h>
> #include <stdio.h>
> #include <limits.h>
> int maxProfit(int* prices, int pricesSize){
> 	int min_price = INT_MAX;
> 	int max_profit = 0;
> 	for (int i = 0; i < pricesSize; i++){
> 		if (prices[i] < min_price){
> 			min_price = prices[i];
> 		}
> 		int profit = prices[i] - min_price;
> 		if (profit > max_profit){
> 			max_profit = profit;
> 		}
> 	}
> 	return max_profit;
> }
> int main(){
> 	int prices[] = {7, 1, 5, 3, 6, 4};
> 	int size = sizeof(prices) / sizeof(prices[0]);
> 	int result = maxProfit(prices, size);
> 	printf("Maximum profit: %d\n", result);
  }