Input:

For the given code snippet, predict the code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed

Example output:
> line1
! line2
> line3
...
> linen

You need to develop a plan for step by step execution of the code snippet. 
Do not answer unless instructed to do so

DISCLAIMER: Lines that are not executed are to be denoted with a SINGLE '!' whereas lines that are executed are to be denoted with a single '>'
Below are a couple examples of the process you need to follow to predict the code coverage of a given code snippet and its plan.

Example 1

Given CODE SNIPPET: 
rmVowels :: [Char] -> [Char]
rmVowels y = [ x | x <- y, x /= 'A' && x /= 'E' && x /= 'I' && x /= 'O' && x /= 'U' && x /= 'Y']
main = do
  let result = rmVowels ['A']
  print result


Given PLAN: 
STEP 1: Define a function rmVowels which takes an array of characters as input and produces an array of characters as output.
STEP 2: In the main function, let the "result" variable hold the output of rmVowels given the array of characters ['A'].
STEP 3: In the rmVowels function, let the output array be the input array modified such that vowel characters are removed and non-vowel characters retained.
STEP 4: In the main function, print the resulting array to the screen.


So the CODE COVERAGE for the given code snippet will be: 
> rmVowels :: [Char] -> [Char]
> rmVowels y = [ x | x <- y, x /= 'A' && x /= 'E' && x /= 'I' && x /= 'O' && x /= 'U' && x /= 'Y']
> main = do
>   let result = rmVowels ['A']
>   print result


Example 2

Given CODE SNIPPET: 
isValidParentheses :: String -> Bool
isValidParentheses str = check str 0
  where
    check [] 0 = True
    check [] _ = False
    check (')':xs) n = n > 0 && check xs (n - 1)
    check ('(':xs) n = check xs (n + 1)
    check (_:xs) n = check xs n
main = do
  let result = isValidParentheses "(()"
  print result


Given PLAN: 
STEP 1: Define a function isValidParentheses which takes a string as input and produces a boolean as output.
STEP 2: In the main function, let the "result" variable hold the output of isValidParentheses given the string "(()".
STEP 3: In the isValidParentheses function, initiate the conditional checks with parameters str and 0.
STEP 4: Define five checks. Check 1 verifies whether the parameters are an empty list and the value 0. Check 2 verifies whether the parameters are an empty list and any value other than 0. Check 3 verifies whether the first character of the first parameter is a right parenthesis. Check 4 verifies whether the first character of the first parameter is a left parenthesis. Check 5 verifies whether the first character of the first parameter is any character other than a right or a left parenthesis. These checks are executed in the order in which they appear. We stop executing the next check as soon as we find one which satisfies the correct condition. In the case of the "(()" input string, given the ordering of the checks, all checks are executed.
STEP 5: In the main function, print the resulting array to the screen.


So the CODE COVERAGE for the given code snippet will be: 
> isValidParentheses :: String -> Bool
> isValidParentheses str = check str 0
>   where
>     check [] 0 = True
>     check [] _ = False
>     check (')':xs) n = n > 0 && check xs (n - 1)
>     check ('(':xs) n = check xs (n + 1)
>     check (_:xs) n = check xs n
> main = do
>   let result = isValidParentheses "(()"
>   print result



In a similar fashion, develop a PLAN of step by step execution of the below code snippet and predict the CODE COVERAGE.
findDivisorsRecursive :: Integer -> Integer -> [Integer]
findDivisorsRecursive i j
    | i == j = 1 : []
    | (mod i j) == 0 = (div i j) : findDivisorsRecursive i (j+1)
    | otherwise = findDivisorsRecursive i (j+1)

findDivisors :: Integer -> [Integer]
findDivisors i = findDivisorsRecursive i 1
main = do
  let result = findDivisors 12
  print result



Output:

Given PLAN:
STEP 1: Define a function findDivisorsRecursive which takes two integers as input and produces an array of integers as output.
STEP 2: In the main function, let the "result" variable hold the output of findDivisors given the integer 12.
STEP 3: In the findDivisorsRecursive function, initiate the conditional checks with parameters i and j.
STEP 4: Define three checks. Check 1 verifies whether the parameters are equal. Check 2 verifies whether the remainder of i divided by j is equal to 0. Check 3 verifies whether none of the previous checks are satisfied. These checks are executed in the order in which they appear. In the case of the input integer 12, given the ordering of the checks, all checks are executed.
STEP 5: In the main function, print the resulting array to the screen.


So the CODE COVERAGE for the given code snippet will be: 
> findDivisorsRecursive :: Integer -> Integer -> [Integer]
> findDivisorsRecursive i j
>     | i == j = 1 : []
>     | (mod i j) == 0 = (div i j) : findDivisorsRecursive i (j+1)
>     | otherwise = findDivisorsRecursive i (j+1)
> findDivisors :: Integer -> [Integer]
> findDivisors i = findDivisorsRecursive i 1
> main = do
>   let result = findDivisors 12
>   print result