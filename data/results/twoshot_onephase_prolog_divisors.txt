Input:

For the given code snippet, predict the code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed

Example output:
> line1
! line2
> line3
...
> linen

You need to develop a plan for step by step execution of the code snippet. 
Do not answer unless instructed to do so

DISCLAIMER: Lines that are not executed are to be denoted with a SINGLE '!' whereas lines that are executed are to be denoted with a single '>'
Below are a couple examples of the process you need to follow to predict the code coverage of a given code snippet and its plan.

Example 1

Given CODE SNIPPET: 
remove_vowels([], []).
remove_vowels([H|T], R) :- 
    is_vowel(H), 
    remove_vowels(T, R).
remove_vowels([H|T], [H|R]) :- 
    \+ is_vowel(H), 
    remove_vowels(T, R).
is_vowel(Char) :- 
    member(Char, ['A', 'E', 'I', 'O', 'U', 'Y']).
main :-
    Input = ['A'],
    remove_vowels(Input, Output),
    write(Output).


Given PLAN: 
STEP 1: Define 4 clauses each with different parameters.
STEP 2: Ensure a main function exists.
STEP 3: Inside the main function, let the variable Input be the character array ['A'].
STEP 4: The function remove_vowels(['A'], Output) is invoked.
STEP 5: The first clause matches: remove_vowels([H|T], R) where H is A and T is [].
STEP 6: This leads to calling the clause is_vowel(A)
STEP 7: The is_vowel(H) predicate is called, checking if the letter A is in the list ['A', 'E', 'I', 'O', 'U', 'Y'], which it is, so the check return true
STEP 8: Make the recursive call with the remove_vowels(T, R) clause, which T is an empty list
STEP 9: Reach the base case remove_vowels([], []), which the predicate return R = []
STEP 10: The control returns to the previous call remove_vowels(['A'], Output), where Output is set to and empty list []
STEP 11: Write the Output via the write(Output) predicate, thus printing the result.


So the CODE COVERAGE for the given code snippet will be: 
> remove_vowels([], []).
> remove_vowels([H|T], R) :- 
>     is_vowel(H), 
>     remove_vowels(T, R).
! remove_vowels([H|T], [H|R]) :- 
!     \+ is_vowel(H), 
!     remove_vowels(T, R).
> is_vowel(Char) :- 
>     member(Char, ['A', 'E', 'I', 'O', 'U', 'Y']).
> main :-
>     Input = ['A'],
>     remove_vowels(Input, Output),
>     write(Output).


Example 2

Given CODE SNIPPET: 
valid_pair('(', ')').
is_valid_string(L) :- validate(L, []).
validate([], []).
validate([H|T], Stack) :-
    member(H, ['(']),
    validate(T, [H|Stack]).
validate([H|T], [Top|Rest]) :-
    valid_pair(Top, H),
    validate(T, Rest).
validate(_, _) :- fail.
main :-
    Input = ['(', '(', ')', ')'],
    is_valid_string(Input).

Given PLAN: 
STEP 1: Define the valid pairs of brackets using the clause valid_pair('(', ')').
STEP 2: Ensure a main function exists.
STEP 3: Inside the main function, let the variable Input be the character array ['(', '(', ')', ')'].
STEP 4: Call the function is_valid_string(Input), which triggers the validation process.
STEP 5: Inside is_valid_string, the validate predicate is invoked with the arguments (['(', '(', ')', ')'], []), starting with an empty stack.
STEP 6: The first element '(' is processed, matching the clause validate([H|T], Stack) where H is '(' and T is ['(', ')', ')'].
STEP 7: Since '(' is an opening bracket, it gets pushed onto the stack, leading to a recursive call with validate(['(', ')', ')'], ['(']).
STEP 8: The next element '(' is processed in a similar manner, leading to the call validate([')', ')'], ['(', '(']).
STEP 9: The element ')' is now processed, which matches the clause validate([H|T], [Top|Rest]), where H is ')' and Top is '('
STEP 10: The valid_pair('(', ')') predicate checks if '(' matches ')', which it does, so the stack now has ['('] after removing '('
STEP 11: The next element ')' is processed, again matching the clause validate([H|T], [Top|Rest]), where H is ')' and Top is '('
STEP 12: The valid_pair('(', ')') predicate checks if '(' matches ')', which it does, resulting in an empty stack after removing '('
STEP 13: With the input list now fully processed, the stack is empty, triggering the base case validate([], []), which signifies that the input string is valid
STEP 14: The success returns from is_valid_string(Input), confirming that the list of brackets is valid

So the CODE COVERAGE for the given code snippet will be: 
> valid_pair('(', ')').
> is_valid_string(L) :- validate(L, []).
> validate([], []).
> validate([H|T], Stack) :-
>     member(H, ['(']),
>     validate(T, [H|Stack]).
> validate([H|T], [Top|Rest]) :-
>     valid_pair(Top, H),
>     validate(T, Rest).
> validate(_, _) :- fail.
> main :-
>     Input = ['(', '(', ')', ')'],
>     is_valid_string(Input).



In a similar fashion, develop a PLAN of step by step execution of the below code snippet and predict the CODE COVERAGE.
factors(N, R) :- findall(F, factor(N, F), L), reverse(L, R).
factor(0, _) :- !, fail.
factor(N, F) :- between(1, N, F), 0 is N mod F.
main :- 
    factors(24, Output),
    write(Output).


Output:


Given CODE SNIPPET: 
factors(N, R) :- findall(F, factor(N, F), L), reverse(L, R).
factor(0, _) :- !, fail.
factor(N, F) :- between(1, N, F), 0 is N mod F.
main :- 
    factors(24, Output),
    write(Output).

Given PLAN: 
STEP 1: Define the factors predicate with two parameters N and R.
STEP 2: Inside the factors predicate, use the findall predicate to find all factors of N and store them in a list L.
STEP 3: Reverse the list L and store it in R.
STEP 4: Define the factor predicate with two parameters N and F.
STEP 5: Check if N is 0, if so, use the cut operator to stop backtracking and fail.
STEP 6: Use the between predicate to generate numbers between 1 and N and store them in F.
STEP 7: Check if F is a factor of N by using the mod operator, if so, continue with the recursive call.
STEP 8: Inside the main function, let the variable N be 24.
STEP 9: Call the factors predicate with the arguments (24, Output).
STEP 10: The findall predicate finds all factors of 24 and stores them in a list L.
STEP 11: The list L is reversed and stored in Output.
STEP 12: The write predicate prints the Output, which is the list of factors of 24.

So the CODE COVERAGE for the given code snippet will be: 
> factors(N, R) :- findall(F, factor(N, F), L), reverse(L, R).
> factor(0, _) :- !, fail.
> factor(N, F) :- between(1, N, F), 0 is N mod F.
> main :- 
>     factors(24, Output),
>     write(Output).