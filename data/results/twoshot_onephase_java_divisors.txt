Input:

For the given code snippet, predict the code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed

Example output:
> line1
! line2
> line3
...
> linen

You need to develop a plan for step by step execution of the code snippet. 
Do not answer unless instructed to do so

DISCLAIMER: Lines that are not executed are to be denoted with a SINGLE '!' whereas lines that are executed are to be denoted with a single '>'
Below are a couple examples of the process you need to follow to predict the code coverage of a given code snippet and its plan.

Example 1

Given CODE SNIPPET: 
public class VowelFilter{
	private char[] arr;
	private char[] filtered;
	public VowelFilter(char[] arr){
		this.arr = arr;
	}
	public void filter(){
		int count = 0;
		for(char c : this.arr){
			if(!isVowel(c)){
				count++;
			}
		}
		this.filtered = new char[count];
		for(char c : this.arr){
			if(!isVowel(c)){
				this.filtered[count - 1] = c;
				count--;
			}
		}
	}
	public String toString(){
		StringBuilder out = new StringBuilder("[ ");
		for (int i = this.filtered.length - 1; i >= 0; i--){
			out.append(this.filtered[i]).append(" ");
		}
		out.append("]");
		return out.toString();
	}
	private boolean isVowel(char c){
		return (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == 'Y');
	}
	public static void main(String[] args){
		VowelFilter fil = new VowelFilter(new char[]{'A', 'E', 'I', 'O', 'U'});
		fil.filter();
		System.out.println(fil);
	}
}


Given PLAN: 
STEP 1: Ensure a main function exists.
STEP 2: Instantiate a VowelFilter Object fil and pass in array of chars ['A', 'E', 'I', 'O', 'U'] into the VowelFilter constructor.
STEP 3: Instantiate the object fil and set the instance variable arr to the passed in array of chars.
STEP 4: Call the objects method filter() to filter out the vowels from the array arr.
STEP 5: Set count to 0.
STEP 6: Iterate through the array of chars in arr.
STEP 7: Check if each character is a vowel using the isVowel() method.
STEP 8: Each time the character in the arr array isn't a vowel, increment count by 1.
STEP 9: After counting the number of non-vowel characters in the array, instantiate the filtered instance variable to an array of chars with a size of the variable count.
STEP 10: Iterate through the array of chars in arr again.
STEP 11: Check if each character is a vowel using the isVowel() method again.
STEP 12: Each time the chacter in the arr array isn't a vowel, set the value in the filtered array at index count-1 to the non-vowel character, then decrement count by 1.
STEP 13: Repeat this process until the for loop has iterated over all characters in the arr array.
STEP 14: Return from the filter method.
STEP 15: Print out the array of non-vowel characters to the user using the overridden toString Method.

So the CODE COVERAGE for the given code snippet will be: 
> public class VowelFilter{
> 	private char[] arr;
> 	private char[] filtered;
> 	public VowelFilter(char[] arr){
> 		this.arr = arr;
  	}
> 	public void filter(){
> 		int count = 0;
> 		for(char c : this.arr){
> 			if(!isVowel(c)){
! 				count++;
  			}
  		}
> 		this.filtered = new char[count];
> 		for(char c : this.arr){
> 			if(!isVowel(c)){
! 				this.filtered[count - 1] = c;
! 				count--;
  			}
  		}
  	}
> 	public String toString(){
> 		StringBuilder out = new StringBuilder("[ ");
> 		for (int i = this.filtered.length - 1; i >= 0; i--){
> 			out.append(this.filtered[i]).append(" ");
  		}
> 		out.append("]");
> 		return out.toString();
  	}
> 	private boolean isVowel(char c){
> 		return (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == 'Y');
  	}
> 	public static void main(String[] args){
> 		VowelFilter fil = new VowelFilter(new char[]{'A', 'E', 'I', 'O', 'U'});
> 		fil.filter();
> 		System.out.println(fil);
  	}
  }


Example 2

Given CODE SNIPPET: 
import java.util.Stack;
public class VPar{
	private String s;
	public VPar (String s){
		this.s = s;
	}
	public boolean isValid(){
		Stack<Character> stack = new Stack<Character>();
		for (char c : s.toCharArray()){
			if (c == '('){ 
				stack.push(')');
			}
			else if (stack.isEmpty() || stack.pop() != c){ 
				return false;
			}
		}
		return stack.isEmpty();
	}
	public static void main(String[] args){
		VPar p = new VPar("(())");
		System.out.println(p.isValid());
	}
}

Given PLAN: 
STEP 1: Ensure a main function exists.
STEP 2: Import java.util.Stack.
STEP 3: Instantiate a VPar Object p and pass in a string "(())" into the VPar constructor.
STEP 4: Instantiate the object p and set the instance variable s to the input string.
STEP 5: Call the objects method isValid() to check if the passed in set of parenthesis is valid with open and closing brackets.
STEP 6: Instantitate a stack data structure called stack parameterized for Character objects.
STEP 7: Iterate over all the characters in the string s.
STEP 8: For every opening bracket, push its corresponding closing bracket onto the stack.
STEP 9: For every closing bracket, pop the top element from the stack and check that the current iteration character c matches the popped character from the stack.
STEP 10: Return false if the character doesn't match or if the stack is empty.
STEP 11: After iterating through all the character elements, return true if the stack is empty in the end, and false if it contains 1 or more character elements.
STEP 12: Print this return of true or false from the isValid method.


So the CODE COVERAGE for the given code snippet will be: 
> import java.util.Stack;
> public class VPar{
> 	private String s;
> 	public VPar (String s){
> 		this.s = s;
  	}
> 	public boolean isValid(){
> 		Stack<Character> stack = new Stack<Character>();
> 		for (char c : s.toCharArray()){
> 			if (c == '('){ 
> 				stack.push(')');
  			}
> 			else if (stack.isEmpty() || stack.pop() != c){ 
! 				return false;
  			}
  		}
> 		return stack.isEmpty();
  	}
> 	public static void main(String[] args){
> 		VPar p = new VPar("(())");
> 		System.out.println(p.isValid());
  	}
  }


In a similar fashion, develop a PLAN of step by step execution of the below code snippet and predict the CODE COVERAGE.
import java.util.Arrays;
public class Factors{
	private int num;
	private int numFact;
	public Factors(int num){
		this.num = num;
		this.numFact = numFactors();
	}
	private int numFactors(){
		int count = 0;
		for(int i = this.num; i > 0; --i){
			if(this.num % i == 0){
				count++;
			}
		}
		return count;
	}
	public int[] getFactors(){
		int ind = 0;
		int[] fac = new int[this.numFact];  
		for(int i = this.num; i > 0; --i){
			if(this.num % i == 0){
				fac[ind++] = i;
			}
		}
		return fac;
	}
	public static void main(String[] args){
		Factors f = new Factors(24);
		int[] factors = f.getFactors();
		System.out.println(Arrays.toString(factors));
	}
}


Output:


Given PLAN: 
STEP 1: Ensure a main function exists.
STEP 2: Import java.util.Arrays.
STEP 3: Instantiate a Factors Object f and pass in the integer 24 into the Factors constructor.
STEP 4: Instantiate the object f and set the instance variable num to the passed in integer.
STEP 5: Call the objects method getFactors() to get an array of factors for the integer num.
STEP 6: Instantiate an integer array called factors and set it equal to the return of the getFactors() method.
STEP 7: Print out the array of factors to the user using the Arrays.toString() method.
STEP 8: Instantiate an integer variable count and set it equal to 0.
STEP 9: Iterate through all numbers from num to 0.
STEP 10: Check if the current number is a factor of num by using the modulus operator.
STEP 11: If the current number is a factor, increment count by 1.
STEP 12: Return the value of count.
STEP 13: Instantiate an integer variable ind and set it equal to 0.
STEP 14: Instantiate an integer array called fac with a size of numFact.
STEP 15: Iterate through all numbers from num to 0.
STEP 16: Check if the current number is a factor of num by using the modulus operator.
STEP 17: If the current number is a factor, set the value at index ind in the fac array to the current number, then increment ind by 1.
STEP 18: Return the fac array.
STEP 19: Print out the array of factors to the user using the Arrays.toString() method.

So the CODE COVERAGE for the given code snippet will be: 
> import java.util.Arrays;
> public class Factors{
> 	private int num;
> 	private int numFact;
> 	public Factors(int num){
> 		this.num = num;
> 		this.numFact = numFactors();
  	}
> 	private int numFactors(){
> 		int count = 0;
> 		for(int i = this.num; i > 0; --i){
> 			if(this.num % i == 0){
! 				count++;
  			}
  		}
> 		return count;
  	}
> 	public int[] getFactors(){
> 		int ind = 0;
> 		int[] fac = new int[this.numFact];  
> 		for(int i = this.num; i > 0; --i){
> 			if(this.num % i == 0){
! 				fac[ind++] = i;
  			}
  		}
> 		return fac;
  	}
> 	public static void main(String[] args){
> 		Factors f = new Factors(24);
> 		int[] factors = f.getFactors();
> 		System.out.println(Arrays.toString(factors));
  	}
  }