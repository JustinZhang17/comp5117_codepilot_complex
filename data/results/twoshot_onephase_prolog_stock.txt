Input:

For the given code snippet, predict the code coverage. The code coverage indicates whether a statement has been executed or not. 
> if the line is executed
! if the line is not executed

Example output:
> line1
! line2
> line3
...
> linen

You need to develop a plan for step by step execution of the code snippet. 
Do not answer unless instructed to do so

DISCLAIMER: Lines that are not executed are to be denoted with a SINGLE '!' whereas lines that are executed are to be denoted with a single '>'
Below are a couple examples of the process you need to follow to predict the code coverage of a given code snippet and its plan.

Example 1

Given CODE SNIPPET: 
remove_vowels([], []).
remove_vowels([H|T], R) :- 
    is_vowel(H), 
    remove_vowels(T, R).
remove_vowels([H|T], [H|R]) :- 
    \+ is_vowel(H), 
    remove_vowels(T, R).
is_vowel(Char) :- 
    member(Char, ['A', 'E', 'I', 'O', 'U', 'Y']).
main :-
    Input = ['A'],
    remove_vowels(Input, Output),
    write(Output).


Given PLAN: 
STEP 1: Define 4 clauses each with different parameters.
STEP 2: Ensure a main function exists.
STEP 3: Inside the main function, let the variable Input be the character array ['A'].
STEP 4: The function remove_vowels(['A'], Output) is invoked.
STEP 5: The first clause matches: remove_vowels([H|T], R) where H is A and T is [].
STEP 6: This leads to calling the clause is_vowel(A)
STEP 7: The is_vowel(H) predicate is called, checking if the letter A is in the list ['A', 'E', 'I', 'O', 'U', 'Y'], which it is, so the check return true
STEP 8: Make the recursive call with the remove_vowels(T, R) clause, which T is an empty list
STEP 9: Reach the base case remove_vowels([], []), which the predicate return R = []
STEP 10: The control returns to the previous call remove_vowels(['A'], Output), where Output is set to and empty list []
STEP 11: Write the Output via the write(Output) predicate, thus printing the result.


So the CODE COVERAGE for the given code snippet will be: 
> remove_vowels([], []).
> remove_vowels([H|T], R) :- 
>     is_vowel(H), 
>     remove_vowels(T, R).
! remove_vowels([H|T], [H|R]) :- 
!     \+ is_vowel(H), 
!     remove_vowels(T, R).
> is_vowel(Char) :- 
>     member(Char, ['A', 'E', 'I', 'O', 'U', 'Y']).
> main :-
>     Input = ['A'],
>     remove_vowels(Input, Output),
>     write(Output).


Example 2

Given CODE SNIPPET: 
valid_pair('(', ')').
is_valid_string(L) :- validate(L, []).
validate([], []).
validate([H|T], Stack) :-
    member(H, ['(']),
    validate(T, [H|Stack]).
validate([H|T], [Top|Rest]) :-
    valid_pair(Top, H),
    validate(T, Rest).
validate(_, _) :- fail.
main :-
    Input = ['(', '(', ')', ')'],
    is_valid_string(Input).

Given PLAN: 
STEP 1: Define the valid pairs of brackets using the clause valid_pair('(', ')').
STEP 2: Ensure a main function exists.
STEP 3: Inside the main function, let the variable Input be the character array ['(', '(', ')', ')'].
STEP 4: Call the function is_valid_string(Input), which triggers the validation process.
STEP 5: Inside is_valid_string, the validate predicate is invoked with the arguments (['(', '(', ')', ')'], []), starting with an empty stack.
STEP 6: The first element '(' is processed, matching the clause validate([H|T], Stack) where H is '(' and T is ['(', ')', ')'].
STEP 7: Since '(' is an opening bracket, it gets pushed onto the stack, leading to a recursive call with validate(['(', ')', ')'], ['(']).
STEP 8: The next element '(' is processed in a similar manner, leading to the call validate([')', ')'], ['(', '(']).
STEP 9: The element ')' is now processed, which matches the clause validate([H|T], [Top|Rest]), where H is ')' and Top is '('
STEP 10: The valid_pair('(', ')') predicate checks if '(' matches ')', which it does, so the stack now has ['('] after removing '('
STEP 11: The next element ')' is processed, again matching the clause validate([H|T], [Top|Rest]), where H is ')' and Top is '('
STEP 12: The valid_pair('(', ')') predicate checks if '(' matches ')', which it does, resulting in an empty stack after removing '('
STEP 13: With the input list now fully processed, the stack is empty, triggering the base case validate([], []), which signifies that the input string is valid
STEP 14: The success returns from is_valid_string(Input), confirming that the list of brackets is valid

So the CODE COVERAGE for the given code snippet will be: 
> valid_pair('(', ')').
> is_valid_string(L) :- validate(L, []).
> validate([], []).
> validate([H|T], Stack) :-
>     member(H, ['(']),
>     validate(T, [H|Stack]).
> validate([H|T], [Top|Rest]) :-
>     valid_pair(Top, H),
>     validate(T, Rest).
> validate(_, _) :- fail.
> main :-
>     Input = ['(', '(', ')', ')'],
>     is_valid_string(Input).



In a similar fashion, develop a PLAN of step by step execution of the below code snippet and predict the CODE COVERAGE.
max_profit(Prices, MaxProfit) :-
    max_profit_helper(Prices, 1000000, 0, MaxProfit).
max_profit_helper([], _, MaxProfit, MaxProfit).
max_profit_helper([Price|Rest], MinPrice, TempMaxProfit, MaxProfit) :-
    (Price < MinPrice -> NewMinPrice = Price ; NewMinPrice = MinPrice),
    Diff is Price - MinPrice,
    (Diff > TempMaxProfit -> NewTempMaxProfit = Diff ; NewTempMaxProfit = TempMaxProfit),
    max_profit_helper(Rest, NewMinPrice, NewTempMaxProfit, MaxProfit).
main :-
    Input = [4, 7, 2, 1, 9],
    max_profit(Input, MaxProfit),
    write(MaxProfit).



Output:

Given PLAN:
STEP 1: Define the max_profit predicate with two parameters, Prices and MaxProfit.
STEP 2: Ensure a main function exists.
STEP 3: Inside the main function, let the variable Input be the list [4, 7, 2, 1, 9].
STEP 4: Call the max_profit(Input, MaxProfit) predicate, which triggers the max_profit_helper predicate with the arguments ([4, 7, 2, 1, 9], 1000000, 0, MaxProfit).
STEP 5: The first element 4 is processed, matching the clause max_profit_helper([Price|Rest], MinPrice, TempMaxProfit, MaxProfit) where Price is 4 and Rest is [7, 2, 1, 9].
STEP 6: The current minimum price is set to 1000000, which is greater than 4, so the new minimum price is set to 4.
STEP 7: The difference between the current price and the minimum price is calculated, which is 0.
STEP 8: Since 0 is not greater than the current temporary maximum profit, the new temporary maximum profit remains 0.
STEP 9: The recursive call is made with the remaining list [7, 2, 1, 9], the new minimum price 4, and the new temporary maximum profit 0.
STEP 10: The next element 7 is processed, which is greater than the current minimum price 4, so the minimum price remains 4.
STEP 11: The difference between 7 and 4 is calculated, which is 3.
STEP 12: Since 3 is greater than the current temporary maximum profit 0, the new temporary maximum profit is set to 3.
STEP 13: The recursive call is made with the remaining list [2, 1, 9], the minimum price 4, and the temporary maximum profit 3.
STEP 14: The next element 2 is processed, which is less than the current minimum price 4, so the new minimum price is set to 2.
STEP 15: The difference between 2 and 2 is calculated, which is 0.
STEP 16: Since 0 is not greater than the current temporary maximum profit 3, the new temporary maximum profit remains 3.
STEP 17: The recursive call is made with the remaining list [1, 9], the minimum price 2, and the temporary maximum profit 3.
STEP 18: The next element 1 is processed, which is less than the current minimum price 2, so the new minimum price is set to 1.
STEP 19: The difference between 1 and 1 is calculated, which is 0.
STEP 20: Since 0 is not greater than the current temporary maximum profit 3, the new temporary maximum profit remains 3.
STEP 21: The recursive call is made with the remaining list [9], the minimum price 1, and the temporary maximum profit 3.
STEP 22: The next element 9 is processed, which is greater than the current minimum price 1, so the minimum price remains 1.
STEP 23: The difference between 9 and 1 is calculated, which is 8.
STEP 24: Since 8 is greater than the current temporary maximum profit 3, the new temporary maximum profit is set to 8.
STEP 25: The recursive call is made with the remaining list [], the minimum price 1, and the temporary maximum profit 8.
STEP 26: The base case is reached, with the predicate max_profit_helper([], _, MaxProfit, MaxProfit) returning MaxProfit = 8.
STEP 27: The control returns to the previous call max_profit_helper([Price|Rest], MinPrice, TempMaxProfit, MaxProfit), where Price is 9, Rest is [], MinPrice is 1, and TempMaxProfit is 8.
STEP 28: The predicate returns MaxProfit = 8.
STEP 29: The control returns to the previous call max_profit(Input, MaxProfit), where MaxProfit is set to 8.
STEP 30: The result is printed via the write(MaxProfit) predicate, printing the maximum profit of 8.

So the CODE COVERAGE for the given code snippet will be: 
> max_profit(Prices, MaxProfit) :-
>     max_profit_helper(Prices, 1000000, 0, MaxProfit).
> max_profit_helper([], _, MaxProfit, MaxProfit).
> max_profit_helper([Price|Rest], MinPrice, TempMaxProfit, MaxProfit) :-
>     (Price < MinPrice -> NewMinPrice = Price ; NewMinPrice = MinPrice),
>     Diff is Price - MinPrice,
>     (Diff > TempMaxProfit -> NewTempMaxProfit = Diff ; NewTempMaxProfit = TempMaxProfit),
>     max_profit_helper(Rest, NewMinPrice, NewTempMaxProfit, MaxProfit).
> main :-
>     Input = [4, 7, 2, 1, 9],
>     max_profit(Input, MaxProfit),
>     write(MaxProfit).